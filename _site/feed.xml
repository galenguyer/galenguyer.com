<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="https://galenguyer.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://galenguyer.com/" rel="alternate" type="text/html" /><updated>2021-02-13T12:11:40-05:00</updated><id>https://galenguyer.com/feed.xml</id><title type="html">Galen Guyer</title><subtitle>Galen Guyer is a Backend Software Engineer currently studying at the Rochester Institute of Technology.  Galen has also interned at Microsoft twice, over the summers of 2018 and 2019.  This website is a portfolio of his work experience and projects.</subtitle><author><name>Galen Guyer</name></author><entry><title type="html">Setting Up and Securing Nginx</title><link href="https://galenguyer.com/blog/2020/08/15/setting-up-nginx" rel="alternate" type="text/html" title="Setting Up and Securing Nginx" /><published>2020-08-15T00:00:00-04:00</published><updated>2020-08-15T00:00:00-04:00</updated><id>https://galenguyer.com/blog/2020/08/15/setting-up-nginx</id><content type="html" xml:base="https://galenguyer.com/blog/2020/08/15/setting-up-nginx">&lt;p id=&quot;intro&quot;&gt;Setting up a website is a good first task for anyone looking to get into server administration.
    it requires a basic grasp of Linux concepts like package management, system services, and how to
    edit configuration files. This guide will walk you through installing &lt;a href=&quot;https://nginx.org/&quot;&gt;nginx&lt;/a&gt; on
    Ubuntu or Fedora
    and securing it with &lt;a href=&quot;https://certbot.eff.org/&quot;&gt;certbot&lt;/a&gt; for HTTPS.
&lt;/p&gt;
&lt;div id=&quot;install&quot;&gt;
    &lt;h3&gt;Installing Nginx and Certbot&lt;/h3&gt;
    &lt;p&gt;The first step will be installing nginx. There are several ways to go about this, so I'll run through them from
        easiest to hardest.&lt;/p&gt;
    &lt;p&gt;The easiest way to install nginx will be to use the official packages. This can be done with &lt;code&gt;apt install
            nginx&lt;/code&gt; on Ubuntu and Debian or &lt;code&gt;dnf install nginx&lt;/code&gt; on Fedora.
        However, official repositories are normally a few versions behind. While this isn't necessarily bad, some people
        (myself included) like
        using the newest version for some features that won't be touched on in this guide.&lt;/p&gt;
    &lt;p&gt;The easiest way to install the latest version of nginx will be to use packages I build and maintain. &lt;b&gt;However,
            this only works on Ubuntu 18+.&lt;/b&gt; To get started, first add
        my &lt;a href=&quot;/pubkey.txt&quot;&gt;GPG key&lt;/a&gt; to apt and then add the package repository I maintain to your apt sources.
        The easiest way to do this
        is to run &lt;code&gt;curl -sSL https://packages.galenguyer.com/bootstrap.sh | sh&lt;/code&gt;, though if you're
        &lt;a href=&quot;https://www.idontplaydarts.com/2016/04/detecting-curl-pipe-bash-server-side/&quot;&gt;hesitant to pipe from
            curl to bash&lt;/a&gt;, you can download
        and run the script normally. Finally, install the package you want. Five are provided, with various feature
        sets. Mainline packages are the latest version of nginx, whereas
        stable packages use the nginx stable branch, which is slightly behind mainline. Packages with &quot;quiche&quot; in the
        name have experimental HTTP/3 support enabled,
        which I don't reccomend unless you're familiar with nginx and ready to debug it. I would suggest installing the
        &lt;code&gt;edgeinx-mainline&lt;/code&gt; package for the best mix of features and stability.
        This can be done by simply running &lt;code&gt;apt install edgeinx-mainline&lt;/code&gt;. Any time you update your system
        with apt update or upgrade, it will update this package if a newer version is found as well.
    &lt;/p&gt;
    &lt;p&gt;The last way to install nginx is build it from source yourself. If you want to do this, I reccomend using &lt;a
            href=&quot;https://cdn.galenguyer.com/txt/build-nginx.sh&quot;&gt;this script&lt;/a&gt;,
        which was originally written by &lt;a href=&quot;https://seedno.de&quot;&gt;Seednode&lt;/a&gt;. You can edit it to change the version
        of nginx you install and change what features are installed as well. It will also set up default config files
        and a systemd service for you. I last tested it on Ubuntu 18.04, but it should work on all modern versions of
        Debian, Ubuntu, and Fedora.
        Be warned, it will take a long time to run if you don't have a relatively powerful CPU.&lt;/p&gt;

    &lt;p&gt;The final thing you'll want to install is certbot-auto. I've found it the easiest way to interact with
        Let'sEncrypt for certificates.
        You can install it by running the following commands:
        &lt;pre&gt;sudo curl -sSL https://dl.eff.org/certbot-auto -o /usr/local/bin/certbot-auto
sudo chmod a+x /usr/local/bin/certbot-auto&lt;/pre&gt;
    &lt;/p&gt;
&lt;/div&gt;
&lt;div id='http'&gt;
    &lt;h3&gt;Configuring Nginx for plain HTTP&lt;/h3&gt;
    &lt;p&gt;Now that nginx is installed, let's complete the basic setup. Before doing this, make sure you have a domain set
        up that resolves to the public IP address of your server.
    &lt;/p&gt;
    &lt;p&gt;To configure nginx, enter the &lt;code&gt;/etc/nginx&lt;/code&gt; directory on your server. You'll need root permissions to
        edit or create any files here. It will be populated with a few basic config files as well as default versions
        for all of them, which you can choose to keep or remove with &lt;code&gt;rm *default&lt;/code&gt;&lt;/p&gt;
    &lt;p&gt;First, create two directories in which to store your configuration files using the following command:&lt;/p&gt;
    &lt;pre&gt;# mkdir -p /etc/nginx/{sites,ssl}&lt;/pre&gt;
    &lt;p&gt;Now that those directories exist, modify your &lt;code&gt;nginx.conf&lt;/code&gt; file to include any configuration files we
        put in the &lt;code&gt;/etc/nginx/sites&lt;/code&gt; directory. An example configuration file is available here: &lt;a
            href='https://git.galenguyer.com/chef/nginx-demo/raw/branch/master/nginx.conf'&gt;nginx.conf&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;Next, create the file &lt;code&gt;/etc/nginx/ssl/params.conf&lt;/code&gt;, where you'll configure HTTPS. You won't use these
        yet, but we'll get back to them. An example file with comments is available here: &lt;a
            href='https://git.galenguyer.com/chef/nginx-demo/raw/branch/master/ssl/params.conf'&gt;ssl/params.conf&lt;/a&gt;.&lt;/p&gt;
    &lt;p&gt;You'll also want to generate a dhparam.pem file. Here is a &lt;a
            href='https://security.stackexchange.com/questions/94390/whats-the-purpose-of-dh-parameters'&gt;good
            explanation of what they're used for,&lt;/a&gt; though understanding that isn't required. Use the following
        command to generate the file:&lt;/p&gt;
    &lt;pre&gt;# touch /etc/nginx/ssl/dhparam.pem &amp;&amp; openssl dhparam --out /etc/nginx/ssl/dhparam.pem 4096&lt;/pre&gt;

    &lt;p&gt;Now that your basic HTTPS configuration is done, let's tell nginx to listen for requests over HTTP for your
        website and serve files. This will also let us set up HTTPS.&lt;/p&gt;
    &lt;p&gt;In the &lt;code&gt;/etc/nginx/sites&lt;/code&gt; directory, create a file ending with &lt;code&gt;.conf&lt;/code&gt;. The actual name
        isn't important, but I find it useful to follow the pattern of &lt;code&gt;[domain].conf&lt;/code&gt;, so I know which file
        controls which site. An example plain HTTP configuration file can be found here: &lt;a
            href='https://git.galenguyer.com/chef/nginx-demo/raw/branch/master/sites/example.com.nohttps.conf'&gt;sites/example.com.nohttps.conf&lt;/a&gt;,
        but you won't need more than the following four lines. Whichever configuration you go with, make sure to update
        the &lt;code&gt;server_name&lt;/code&gt; and &lt;code&gt;root&lt;/code&gt; options.
        &lt;pre&gt;&lt;b&gt;# /etc/nginx/sites/example.com.conf&lt;/b&gt;

server {
    listen 80;
    listen [::]:80;
    server_name example.com;
    root /var/www/example.com;
}&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;Now that all your configuration files are in place, run &lt;code&gt;sudo nginx -t&lt;/code&gt; to test your configuration. If
        there are any errors, it will tell you, otherwise, you're good to apply the configuration! To do that, simply
        run &lt;code&gt;sudo systemctl restart nginx&lt;/code&gt;, and you should be able to navigate to your website and see any
        pages you have!&lt;/p&gt;
&lt;/div&gt;
&lt;div id='https'&gt;
    &lt;h3&gt;Setting up HTTPS with LetsEncrypt&lt;/h3&gt;
    &lt;p&gt;Now that you can access your website, it's time to get a certificate for HTTPS. Use the following command, making
        sure to update the -w and -d options appropriately:
        &lt;pre&gt;# certbot-auto certonly --webroot -w /var/www/example.com/ -d example.com -d www.example.com --rsa-key-size 4096&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;Once this completes, you will have the certificates in &lt;code&gt;/etc/letsencrypt/live/example.com&lt;/code&gt;.
        You'll have to renew them using the same command or &lt;code&gt;certbot-auto renew&lt;/code&gt; every 90 days.&lt;/p&gt;
    &lt;p&gt;Finally, modify your configuration to use the certificate you just generated. You can use the example file at the
        following link, making sure to change from example.com to your domain! &lt;a
            href='https://git.galenguyer.com/chef/nginx-demo/raw/branch/master/sites/example.com.conf'&gt;sites/example.com.conf&lt;/a&gt;
    &lt;/p&gt;
    &lt;p&gt;Once you've modified the configuration file, test it with &lt;code&gt;sudo nginx -t&lt;/code&gt; again, and if everything is
        good, apply it with &lt;code&gt;sudo systemctl reload nginx&lt;/code&gt;. Now, when you visit your site, it should redirect
        you to the HTTPS version. Just repeat this process to add any more domains!&lt;/p&gt;
&lt;/div&gt;
&lt;div id='notes'&gt;
    &lt;h3&gt;A couple notes&lt;/h3&gt;
    &lt;p&gt;All example configuration files can be found at &lt;a
            href='https://git.galenguyer.com/chef/nginx-demo/'&gt;https://git.galenguyer.com/chef/nginx-demo/&lt;/a&gt;&lt;/p&gt;
    &lt;p&gt;You might have noticed some blocks for php in the example config files. If you want to use PHP, install it (the
        command for Ubuntu is &lt;code&gt;sudo apt install php7.2-fpm&lt;/code&gt;) and uncomment the lines as shown in &lt;a
            href='https://git.galenguyer.com/chef/nginx-demo/raw/branch/master/sites/example.com.withphp.conf'&gt;this
            config file.&lt;/a&gt; You may need to change the socket path. If you are missing any of the other php config
        files, you can find in &lt;a href='https://git.galenguyer.com/chef/nginx-demo/'&gt;this git repo.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;</content><author><name>Galen Guyer</name></author><category term="howto" /><category term="nginx" /><summary type="html">Setting up a website is a good first task for anyone looking to get into server administration. it requires a basic grasp of Linux concepts like package management, system services, and how to edit configuration files. This guide will walk you through installing nginx on Ubuntu or Fedora and securing it with certbot for HTTPS. Installing Nginx and Certbot The first step will be installing nginx. There are several ways to go about this, so I'll run through them from easiest to hardest. The easiest way to install nginx will be to use the official packages. This can be done with apt install nginx on Ubuntu and Debian or dnf install nginx on Fedora. However, official repositories are normally a few versions behind. While this isn't necessarily bad, some people (myself included) like using the newest version for some features that won't be touched on in this guide. The easiest way to install the latest version of nginx will be to use packages I build and maintain. However, this only works on Ubuntu 18+. To get started, first add my GPG key to apt and then add the package repository I maintain to your apt sources. The easiest way to do this is to run curl -sSL https://packages.galenguyer.com/bootstrap.sh | sh, though if you're hesitant to pipe from curl to bash, you can download and run the script normally. Finally, install the package you want. Five are provided, with various feature sets. Mainline packages are the latest version of nginx, whereas stable packages use the nginx stable branch, which is slightly behind mainline. Packages with &quot;quiche&quot; in the name have experimental HTTP/3 support enabled, which I don't reccomend unless you're familiar with nginx and ready to debug it. I would suggest installing the edgeinx-mainline package for the best mix of features and stability. This can be done by simply running apt install edgeinx-mainline. Any time you update your system with apt update or upgrade, it will update this package if a newer version is found as well. The last way to install nginx is build it from source yourself. If you want to do this, I reccomend using this script, which was originally written by Seednode. You can edit it to change the version of nginx you install and change what features are installed as well. It will also set up default config files and a systemd service for you. I last tested it on Ubuntu 18.04, but it should work on all modern versions of Debian, Ubuntu, and Fedora. Be warned, it will take a long time to run if you don't have a relatively powerful CPU.</summary></entry><entry><title type="html">Debugging Error: NotPresent with Rust in Docker</title><link href="https://galenguyer.com/blog/2020/05/19/docker-rust-notpresent" rel="alternate" type="text/html" title="Debugging Error: NotPresent with Rust in Docker" /><published>2020-05-19T00:00:00-04:00</published><updated>2020-05-19T00:00:00-04:00</updated><id>https://galenguyer.com/blog/2020/05/19/docker-rust-notpresent</id><content type="html" xml:base="https://galenguyer.com/blog/2020/05/19/docker-rust-notpresent">&lt;p&gt;Today, a friend posted the following snippet in Slack:&lt;/p&gt;
&lt;pre&gt; [~/Documents/shelflife] [±docker✗] $ docker run -v -it --rm --name my-running-app shelflife-rust-docker
    Error: NotPresent&lt;/pre&gt;
&lt;p&gt;The first guess was they deleted the docker image and forgot to rebuild it. That wasn't the case, leading me to dive into this cryptic error message that we assumed some some hidden Rust or Docker error. We weren't able to find any example of this error message for Rust or Docker online, so I knew this would be a fun challenge.&lt;/p&gt;

&lt;p&gt;The first thing I did was to make sure the path to the binary was working, it'd be silly if this wasn't working because &lt;code&gt;/usr/local/bin&lt;/code&gt; wasn't in the container's PATH. I changed the last line in the Dockerfile from &lt;code&gt;CMD [&quot;shelflife&quot;]&lt;/code&gt; to &lt;code&gt;ENTRYPOINT [&quot;/usr/local/bin/shelflife&quot;]&lt;/code&gt;. The error persisted, which means it wasn't a PATH error. Of course this couldn't be easy.&lt;/p&gt;

&lt;p&gt;The next step in diagnosis was to get a shell on the container. That'd typically be done via &lt;code&gt;docker exec&lt;/code&gt;, but that only works on a running container, which we didn't have. To get around this, I changed the last line of the Dockerfile to &lt;code&gt;ENTRYPOINT [&quot;/bin/bash&quot;]&lt;/code&gt;, which makes &lt;code&gt;docker run -it&lt;/code&gt; drop you into an interactive bash shell. This means I can easily see what's going on and run commands from inside the container.&lt;/p&gt;

&lt;p&gt;Now that I had a shell, I navigated to &lt;code&gt;/usr/local/bin/&lt;/code&gt; and ran &lt;code&gt;./shelflife&lt;/code&gt; to check if there was any output docker was hiding. Unfortunately, there wasn't. I was at roughly the same place as when I started - a cryptic error message and no idea where it was coming from. At least now we can be decently sure it's not a docker issue.&lt;/p&gt;

&lt;p&gt;I'd ran into issues with dynamically linked libraries not being installed in the past, so I used &lt;code&gt;ldd&lt;/code&gt; (List Dynamic Dependencies) to make sure all the dependencies existed. Everything looked fine, and I double-checked by manually installing the library packages for everythin &lt;code&gt;ldd&lt;/code&gt; said was linked. Everything was already installed, and the error persisted.&lt;/p&gt;

&lt;p&gt;The last thing I tried was installing &lt;code&gt;strace&lt;/code&gt;, a tool for tracing system calls, and running &lt;code&gt;strace ./shelflife&lt;/code&gt;. This gave me a huge output full of system calls, but near the bottom was something that looked familiar, the text &quot;NotPresent&quot;. Now I knew I was on the right path! The relevant output that got me to the final answer was the following:&lt;/p&gt;

&lt;pre&gt;getcwd(&quot;/usr/local/bin&quot;, 512)           = 15
statx(0, NULL, AT_STATX_SYNC_AS_STAT, STATX_ALL, NULL) = -1 EFAULT (Bad address)
statx(AT_FDCWD, &quot;/usr/local/bin/.env&quot;, AT_STATX_SYNC_AS_STAT, STATX_ALL, 0x7ffc04639b10) = -1 ENOENT (No such file or directory)
statx(AT_FDCWD, &quot;/usr/local/.env&quot;, AT_STATX_SYNC_AS_STAT, STATX_ALL, 0x7ffc04639930) = -1 ENOENT (No such file or directory)
statx(AT_FDCWD, &quot;/usr/.env&quot;, AT_STATX_SYNC_AS_STAT, STATX_ALL, 0x7ffc04639750) = -1 ENOENT (No such file or directory)
statx(AT_FDCWD, &quot;/.env&quot;, AT_STATX_SYNC_AS_STAT, STATX_ALL, 0x7ffc04639570) = -1 ENOENT (No such file or directory)
write(2, &quot;Error: &quot;, 7Error: )                  = 7
write(2, &quot;NotPresent&quot;, 10NotPresent)              = 10
write(2, &quot;\n&quot;, 1
)                       = 1
sigaltstack({ss_sp=NULL, ss_flags=SS_DISABLE, ss_size=8192}, NULL) = 0
munmap(0x7fb5000f2000, 8192)            = 0
exit_group(1)                           = ?
+++ exited with 1 +++&lt;/pre&gt;

&lt;p&gt;There it is! Right before exiting, there's several checks for a &lt;code&gt;.env&lt;/code&gt; file that all fail. This error didn't happen when run locally, because my friend already made a &lt;code&gt;.env&lt;/code&gt; file. However, I never created one, and more critically, the Dockerfile never copied their version of the file into the image. Once we created a &lt;code&gt;.env&lt;/code&gt; file and added &lt;code&gt;COPY .env .&lt;/code&gt; to the Dockerfile, it started as intended! This wasn't an issue with Docker or Rust at all, but a library giving an unhelpful error message. We couldn't find any documentation of this online, so I hope this post might serve to help anyone else who runs into this issue!&lt;/p&gt;</content><author><name>Galen Guyer</name></author><category term="docker" /><category term="rust" /><summary type="html">Today, a friend posted the following snippet in Slack: [~/Documents/shelflife] [±docker✗] $ docker run -v -it --rm --name my-running-app shelflife-rust-docker Error: NotPresent The first guess was they deleted the docker image and forgot to rebuild it. That wasn't the case, leading me to dive into this cryptic error message that we assumed some some hidden Rust or Docker error. We weren't able to find any example of this error message for Rust or Docker online, so I knew this would be a fun challenge.</summary></entry><entry><title type="html">Jensen Belongs To The Nords</title><link href="https://galenguyer.com/blog/2020/01/28/jensen" rel="alternate" type="text/html" title="Jensen Belongs To The Nords" /><published>2020-01-28T00:00:00-05:00</published><updated>2020-01-28T00:00:00-05:00</updated><id>https://galenguyer.com/blog/2020/01/28/jensen</id><content type="html" xml:base="https://galenguyer.com/blog/2020/01/28/jensen">&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;
&lt;p&gt;On Thursday, Jan 23, Datadog reported high CPU usage for Jensen. I was running some stuff on it at the time so was wondering if my job was causing the high usage. &lt;code&gt;htop&lt;/code&gt; showed some impact by my job, with the majority if CPU usage being a script or executable called &lt;code&gt;./cron&lt;/code&gt; run by user &lt;code&gt;testing&lt;/code&gt;. I remarked on the high CPU usage at the time but assumed it was an RTP testing something. This was later recognized as being not the case, leading to jensen being shut down and wiped.&lt;/p&gt;

&lt;h3 id=&quot;impact&quot;&gt;Impact&lt;/h3&gt;
&lt;p&gt;Nine remote connections to the testing account on jensen were logged. The primary attack, which we noticed and was the last logged connection, was a 3 part attack: A bitcoin miner (which threw the CPU usage alert), a perl script, and an ssh bruteforcing binary. This attack likely had no impact on user data. The previous connection, which was from the same IP three minutes prior, left a file named &lt;code&gt;/tmp/up.txt&lt;/code&gt; that contained what intially appeared to be the username and password of the testing user, however whether or not this is correct is unknown. It then attempted to change the password with &lt;code&gt;passwd&lt;/code&gt;, which failed because we use Kerberos/FreeIPA. The impacts of the other connections are unknown at this time.&lt;/p&gt;

&lt;h3 id=&quot;what-happened&quot;&gt;What Happened&lt;/h3&gt;
&lt;p&gt;The malware left several files behind in the &lt;code&gt;/users/u99/testing/&lt;/code&gt; (which will be referred to as &lt;code&gt;~/&lt;/code&gt;) and &lt;code&gt;/tmp/&lt;/code&gt;, as well as altering the testing user's &lt;a href=&quot;/assets/jensen-crontab.txt&quot;&gt;crontab.&lt;/a&gt; Unsurprisingly, &lt;code&gt;~/.bash_history&lt;/code&gt; is empty, and won't provide any clues as to what happened. The first notable modification by the malware is adding a public key to ~/.ssh/authorized_keys. This key had the comment &lt;code&gt;mdrfckr&lt;/code&gt;. When googled, the first result for this word is a &lt;a href=&quot;https://ubuntuforums.org/showthread.php?t=2395684&quot;&gt;post on the Ubuntu forums&lt;/a&gt; with the same public key as we had. The &lt;a href=&quot;https://askubuntu.com/questions/1161003/strange-cron-job-takes-up-100-of-cpu-ubuntu-18-lts-server&quot;&gt;second result&lt;/a&gt; is about a cron job taking up 100% of CPU usage on an Ubuntu 18 server. Both posts were several months to a year old but matched what happened. There was also a &lt;code&gt;cron.d&lt;/code&gt; file in &lt;code&gt;~/bashtemp/&lt;/code&gt;, which contained some odd lines. These lines were very similar to ones found in both posts and pointed to a few files and folders. Looking into these folders provided some more clues&lt;/p&gt;
&lt;p&gt;The first folder pointed to by the crontab on our machine was &lt;code&gt;~/.bashtemp/a/&lt;/code&gt;. &lt;code&gt;.bashtemp&lt;/code&gt;, starting with a &lt;code&gt;.&lt;/code&gt; (period), is hidden from normal ls, and we see this being a common trend with other folders used by this malware. &lt;code&gt;ls -a&lt;/code&gt; will show these hidden folders. Inspecting &lt;code&gt;~/.bashtemp/a/&lt;/code&gt; shows two ELF binaries and four shell scripts. One of those binaries is named &lt;code&gt;cron&lt;/code&gt;, the same name as the original suspicious process. Seeing as this was a common infection, I uploaded the cron binary to VirusTotal.com. &lt;a href=&quot;https://www.virustotal.com/gui/file/fd9007df08c1bd2cf47fb97443c4d7360e204f4d8fe48c5d603373b2b2975708&quot;&gt;VirusTotal quickly recognized it&lt;/a&gt; as a Bitcoin miner. Some also recognized it as a trojan. VirusTotal also linked to &lt;a href=&quot;https://www.joesandbox.com/analysis/202041/0/html&quot;&gt;a report from joesandbox.com&lt;/a&gt;, which also classified it as a miner/trojan. The other binary in the folder, named anacron, was classified the same, with the other files being shell scripts used to set up and run the miner. &lt;/p&gt;
&lt;p&gt;The next folder to look at was &lt;code&gt;~/.bashtemp/b/&lt;/code&gt;. This contained 4 shells scripts, 3 of which looked similar with the purpose of setting up and running the file run. This file was a bit of an anomaly. The last line is the one that set the ssh key we found by forcibly removing the &lt;code&gt;~/.ssh&lt;/code&gt; folder and adding the mdrfckr key as the only allowed key. This is presumably to make it harder for administrators to access the server and would be effective on a single-user machine that only allows public key login, however that wasn't an issue given the nature of jensen. It also contained a large block of base64 text, which it then decoded and passed to perl. Decoding this base64 showed an exec call to a obfuscated perl script. &lt;a href=&quot;https://www.virustotal.com/gui/file/8651cdfa07da5b01b82f04d145de85be08ed981c99f5a39e91e7fe0fca0d9d7b/detection&quot;&gt;VirusTotal&lt;/a&gt; and &lt;a href=&quot;https://www.joesandbox.com/analysis/202039/0/html&quot;&gt;JoeSandbox&lt;/a&gt; both recognize it as a trojan/shellbot, with one engine labeling it an IRC bot. Curiously, it appears to be written in Portugese.&lt;/p&gt;
&lt;p&gt;The last place pointed to by the crontab was &lt;code&gt;/tmp/.X19-unix/&lt;/code&gt;. This folder name varies the most among reports of similar malware but the &lt;code&gt;/tmp/.X[NUBMER]-unix&lt;/code&gt; trend matches. This contained the hidden folder &lt;code&gt;.rsync&lt;/code&gt; as well as a file called &lt;code&gt;dota3.tar.gz&lt;/code&gt;, which just contained the compressed contents of the &lt;code&gt;.rsync&lt;/code&gt; folder. The &lt;code&gt;.rsync&lt;/code&gt; folder contained a few setup scripts similar to what we saw earlier as well as 3 folders, named &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, and &lt;code&gt;c&lt;/code&gt;. &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; had similar contents to the ones we saw in testing's homedir, but the &lt;code&gt;c&lt;/code&gt; folder is new. The contents are familar, several setup scripts and some binaries. These binaries are new and follow a naming trend. The setup scripts show that each binary is the same program, just compiled for different architectures. The setup scripts select and run the one for the current architecture. &lt;a href=&quot;https://www.virustotal.com/gui/file/86fb767e01d1fd17f7b289b67aefcf3c04882e4d41620c7b4e72018afb482ca4/detection&quot;&gt;VirusTotal reports these binaries&lt;/a&gt; as backdoor/bruteforce programs, which matches &lt;a href=&quot;https://blog.trendmicro.com/trendlabs-security-intelligence/outlaw-hacking-groups-botnet-observed-spreading-miner-perl-based-backdoor/&quot;&gt;a report by trendmicro.com&lt;/a&gt;, who report similar file structures and names.&lt;/p&gt;
&lt;p&gt;Once I had a decent understanding of the files on jensen, I looked through the &lt;a href=&quot;/assets/jensen-auth.txt&quot;&gt;authentication logs&lt;/a&gt; to try to find where the attacker was coming from. There was a theory that the public key we found was left over from when 24ball was compromized, but several things indicate this to not be the case. First off, the scripts found in &lt;code&gt;~/.bashtemp/b/&lt;/code&gt; are responsible for overwriting all keys in &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt; and replacing them with its own. The key found in &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt; matches the key found in the script. Furthermore, I inspected the authentication logs and found nine password logins for the user testing in the past 14 days[7] (Since January 13). There are no logins since Jan. 13 to the testing user using an SSH key. The exploitation of a weak password is further backed up by the fact jensen doesn't mount ceph - even if a publickey was dropped on 24ball when it was compromised, jensen wouldn't have that key. &lt;/p&gt;
&lt;p&gt;Out of the nine connections, there was one that seems likely to be the one that introduced the malware we noticed. I was able to correlate these by checking the file creation time of the &lt;code&gt;dota3.tar.gz&lt;/code&gt; file, which &lt;code&gt;ls -l&lt;/code&gt; reported to be &lt;code&gt;Jan 19 23:53&lt;/code&gt;. The last connection we logged was initiated at &lt;code&gt;Jan 19 23:53:29&lt;/code&gt; and lasted for under 1 second. The originating IP points to a server from a small provider in the Netherlands. The server is not responding on any port now. The other IPs point to Indonesia, Vietnam, Singapore, and New Jersey and all respond on various standard ports. Some of those connections attempted to change the password (with &lt;code&gt;passwd&lt;/code&gt;) but because we use Kerberos/FreeIPA, these attempts failed. Whether or not any of these connections did anything else is unknown.&lt;/p&gt;</content><author><name>Galen Guyer</name></author><category term="security" /><summary type="html">Summary On Thursday, Jan 23, Datadog reported high CPU usage for Jensen. I was running some stuff on it at the time so was wondering if my job was causing the high usage. htop showed some impact by my job, with the majority if CPU usage being a script or executable called ./cron run by user testing. I remarked on the high CPU usage at the time but assumed it was an RTP testing something. This was later recognized as being not the case, leading to jensen being shut down and wiped.</summary></entry></feed>